
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
>  tol <- 1e-6
> 
>  library(bernor)
>  load("salam-old.RData")
>  attach(salam)
> 
>  beta <- c(0.91, -3.01, -0.49, 3.54)
>  sigma <- c(1.18, 0.98)
> 
>  moo <- model("gauss", length(i), 1)
> 
>  nmiss <- 100
>  set.seed(42)
>  out <- bnmarg(y[ , 1], beta, sigma, nmiss, x, z, i, moo, want.weights = TRUE)
> ## IGNORE_RDIFF_BEGIN
>  print(out)
$value
[1] -77.87434

$weigh
  [1] 1.573970e-14 5.197551e-16 1.473962e-05 1.047245e-10 1.812688e-08
  [6] 5.781117e-18 2.545968e-13 3.062119e-15 2.354408e-12 5.868736e-14
 [11] 8.924816e-12 4.702731e-06 2.086421e-11 1.684297e-04 3.762839e-13
 [16] 7.708305e-08 2.014490e-12 1.668114e-10 1.742702e-09 5.906977e-06
 [21] 3.728156e-16 3.210257e-07 6.768364e-05 2.403065e-13 7.183110e-21
 [26] 3.959199e-12 5.211712e-18 2.056431e-09 9.073078e-08 6.488359e-05
 [31] 1.397445e-05 1.308762e-12 1.088859e-08 2.758428e-02 9.622173e-01
 [36] 9.550989e-08 9.927932e-15 3.105915e-15 2.552019e-09 2.891973e-10
 [41] 2.803406e-12 1.920861e-08 3.750896e-13 3.117961e-13 7.951608e-07
 [46] 4.659934e-20 7.036974e-11 9.590107e-09 2.963394e-14 5.017203e-12
 [51] 2.007748e-15 4.092196e-12 3.102279e-11 1.051051e-17 2.289351e-11
 [56] 2.029456e-16 5.042122e-13 4.278610e-20 4.400745e-06 9.706324e-15
 [61] 6.740830e-03 4.931300e-16 4.318494e-13 7.538259e-20 2.205043e-05
 [66] 5.297351e-09 8.282172e-20 7.355035e-16 3.015183e-03 1.493500e-16
 [71] 1.318583e-14 6.261756e-14 3.083042e-16 2.626374e-30 1.342651e-13
 [76] 5.670816e-10 4.327796e-06 2.130848e-09 2.110891e-08 9.542508e-14
 [81] 7.316178e-18 5.743666e-15 1.329901e-12 1.158202e-07 4.482305e-16
 [86] 6.656838e-10 4.591824e-09 3.610510e-11 2.942142e-07 6.910232e-05
 [91] 1.755967e-13 1.518392e-11 1.613456e-18 3.010814e-07 5.259448e-08
 [96] 4.269287e-13 9.004095e-26 2.744288e-09 1.064354e-13 5.237984e-12

> ## IGNORE_RDIFF_END
> 
>  my.bnmarg <- function(y, beta, sigma, nmiss, x, z, iv, model) {
+      logf <- rep(NA, nmiss)
+      logh <- rep(NA, nmiss)
+      for (i in 1:nmiss) {
+          b <- rmiss(model)
+          out <- bernor(y, beta, b, sigma, x, z, iv)
+          logf[i] <- out$value
+          logh[i] <- dmiss(b, model)
+      }
+      a <- max(logf - logh)
+      value <- a + log(mean(exp(logf - logh - a)))
+      w <- exp(logf - logh - a)
+      w <- w / sum(w)
+      return(list(value = value, weigh = w))
+  }
> 
>  set.seed(42)
>  my.out <- my.bnmarg(y[ , 1], beta, sigma, nmiss, x, z, i, moo)
> ## IGNORE_RDIFF_BEGIN
>  print(my.out)
$value
[1] -77.87434

$weigh
  [1] 1.573970e-14 5.197551e-16 1.473962e-05 1.047245e-10 1.812688e-08
  [6] 5.781117e-18 2.545968e-13 3.062119e-15 2.354408e-12 5.868736e-14
 [11] 8.924816e-12 4.702731e-06 2.086421e-11 1.684297e-04 3.762839e-13
 [16] 7.708305e-08 2.014490e-12 1.668114e-10 1.742702e-09 5.906977e-06
 [21] 3.728156e-16 3.210257e-07 6.768364e-05 2.403065e-13 7.183110e-21
 [26] 3.959199e-12 5.211712e-18 2.056431e-09 9.073078e-08 6.488359e-05
 [31] 1.397445e-05 1.308762e-12 1.088859e-08 2.758428e-02 9.622173e-01
 [36] 9.550989e-08 9.927932e-15 3.105915e-15 2.552019e-09 2.891973e-10
 [41] 2.803406e-12 1.920861e-08 3.750896e-13 3.117961e-13 7.951608e-07
 [46] 4.659934e-20 7.036974e-11 9.590107e-09 2.963394e-14 5.017203e-12
 [51] 2.007748e-15 4.092196e-12 3.102279e-11 1.051051e-17 2.289351e-11
 [56] 2.029456e-16 5.042122e-13 4.278610e-20 4.400745e-06 9.706324e-15
 [61] 6.740830e-03 4.931300e-16 4.318494e-13 7.538259e-20 2.205043e-05
 [66] 5.297351e-09 8.282172e-20 7.355035e-16 3.015183e-03 1.493500e-16
 [71] 1.318583e-14 6.261756e-14 3.083042e-16 2.626374e-30 1.342651e-13
 [76] 5.670816e-10 4.327796e-06 2.130848e-09 2.110891e-08 9.542508e-14
 [81] 7.316178e-18 5.743666e-15 1.329901e-12 1.158202e-07 4.482305e-16
 [86] 6.656838e-10 4.591824e-09 3.610510e-11 2.942142e-07 6.910232e-05
 [91] 1.755967e-13 1.518392e-11 1.613456e-18 3.010814e-07 5.259448e-08
 [96] 4.269287e-13 9.004095e-26 2.744288e-09 1.064354e-13 5.237984e-12

> ## IGNORE_RDIFF_END
>  all.equal(out, my.out, tolerance = tol)
[1] TRUE
> 
>  nparm <- length(beta) + length(sigma)
>  epsilon <- 1e-8
> 
>  my.gradient <- rep(0, nparm)
>  for (j in 1:nparm) {
+      beta.eps <- beta
+      sigma.eps <- sigma
+      if (j <= length(beta)) {
+          beta.eps[j] <- beta[j] + epsilon
+      } else {
+          sigma.eps[j - length(beta)] <- sigma[j - length(beta)] + epsilon
+      }
+      set.seed(42)
+      out.eps <- bnmarg(y[ , 1], beta.eps, sigma.eps, nmiss, x, z, i, moo)
+      my.gradient[j] <- (out.eps$value - out$value) / epsilon
+  }
> ## IGNORE_RDIFF_BEGIN
>  print(my.gradient)
[1]  16.154385   4.525077   6.631998   1.160588 -12.667229  -4.461452
> ## IGNORE_RDIFF_END
> 
>  set.seed(42)
>  out <- bnmarg(y[ , 1], beta, sigma, nmiss, x, z, i, moo, deriv = 2)
> ## IGNORE_RDIFF_BEGIN
>  print(out)
$value
[1] -77.87434

$gradient
[1]  16.154382   4.525075   6.631998   1.160588 -12.667231  -4.461452

$hessian
           [,1]       [,2]      [,3]       [,4]        [,5]        [,6]
[1,] -16.089452 -7.7273162 -9.413792 -5.2253668   4.6512024   2.9660257
[2,]  -7.727316 -7.8515624 -5.164223 -5.1641596   0.1808757   0.0224329
[3,]  -9.413792 -5.1642228 -9.952947 -5.2956000   2.7950416   1.5546745
[4,]  -5.225367 -5.1641596 -5.295600 -5.2354227   0.6477110   0.9742391
[5,]   4.651202  0.1808757  2.795042  0.6477110 -10.3949967  -0.6493203
[6,]   2.966026  0.0224329  1.554675  0.9742391  -0.6493203 -12.0960429

> ## IGNORE_RDIFF_END
>  all.equal(out$gradient, my.gradient, tolerance = tol)
[1] TRUE
>  
>  my.hessian <- matrix(0, nparm, nparm)
>  for (j in 1:nparm) {
+      beta.eps <- beta
+      sigma.eps <- sigma
+      if (j <= length(beta)) {
+          beta.eps[j] <- beta[j] + epsilon
+      } else {
+          sigma.eps[j - length(beta)] <- sigma[j - length(beta)] + epsilon
+      }
+      set.seed(42)
+      out.eps <- bnmarg(y[ , 1], beta.eps, sigma.eps, nmiss, x, z, i, moo,
+          deriv = 1)
+      my.hessian[ , j] <- (out.eps$gradient - out$gradient) / epsilon
+  }
> ## IGNORE_RDIFF_BEGIN
>  print(my.hessian)
           [,1]        [,2]      [,3]       [,4]        [,5]         [,6]
[1,] -16.089450 -7.72731603 -9.413792 -5.2253661   4.6512024   2.96602636
[2,]  -7.727317 -7.85156242 -5.164223 -5.1641594   0.1808748   0.02243254
[3,]  -9.413791 -5.16422283 -9.952948 -5.2955994   2.7950414   1.55467461
[4,]  -5.225367 -5.16415957 -5.295600 -5.2354227   0.6477107   0.97423907
[5,]   4.651203  0.18087576  2.795042  0.6477103 -10.3949960  -0.64931953
[6,]   2.966026  0.02243308  1.554675  0.9742386  -0.6493196 -12.09604319
> ## IGNORE_RDIFF_END
> 
>  all.equal(out$hessian, my.hessian, tolerance = tol)
[1] TRUE
>  
> 
> proc.time()
   user  system elapsed 
  0.243   0.020   0.254 
