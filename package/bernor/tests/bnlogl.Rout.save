
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
>  tol <- 1e-6
> 
>  library(bernor)
>  load("salam-old.RData")
>  attach(salam)
> 
>  beta <- c(0.91, -3.01, -0.49, 3.54)
>  sigma <- c(1.18, 0.98)
> 
>  moo <- model("gauss", length(i), 1)
> 
>  nmiss <- 100
>  set.seed(42)
>  out <- bnlogl(y, beta, sigma, nmiss, x, z, i, moo)
> ## IGNORE_RDIFF_BEGIN
>  print(out)
$value
[1] -236.477

> ## IGNORE_RDIFF_END
> 
>  my.bnlogl <- function(y, beta, sigma, nmiss, x, z, iv, model) {
+      save.random.seed <- .Random.seed
+      logf <- rep(NA, ncol(y))
+      for (i in 1:ncol(y)) {
+          .Random.seed <<- save.random.seed
+          out <- bnmarg(y[ , i], beta, sigma, nmiss, x, z, iv, moo)
+          logf[i] <- out$value
+      }
+      return(sum(logf))
+  }
> 
>  set.seed(42)
>  my.out <- my.bnlogl(y, beta, sigma, nmiss, x, z, i, moo)
> ## IGNORE_RDIFF_BEGIN
>  print(my.out)
[1] -236.477
> ## IGNORE_RDIFF_END
>  all.equal(out$value, my.out, tolerance = tol)
[1] TRUE
> 
>  nparm <- length(beta) + length(sigma)
>  epsilon <- 1e-8
> 
>  my.gradient <- rep(0, nparm)
>  for (j in 1:nparm) {
+      beta.eps <- beta
+      sigma.eps <- sigma
+      if (j <= length(beta)) {
+          beta.eps[j] <- beta[j] + epsilon
+      } else {
+          sigma.eps[j - length(beta)] <- sigma[j - length(beta)] + epsilon
+      }
+      set.seed(42)
+      out.eps <- bnlogl(y, beta.eps, sigma.eps, nmiss, x, z, i, moo)
+      my.gradient[j] <- (out.eps$value - out$value) / epsilon
+  }
> ## IGNORE_RDIFF_BEGIN
>  print(my.gradient)
[1]  17.258859   8.479964   7.324954   3.331320 -38.689083  -7.652170
> ## IGNORE_RDIFF_END
> 
>  set.seed(42)
>  out <- bnlogl(y, beta, sigma, nmiss, x, z, i, moo, deriv = 3)
> ## IGNORE_RDIFF_BEGIN
>  print(out)
$value
[1] -236.477

$gradient
[1]  17.258852   8.479957   7.324954   3.331324 -38.689093  -7.652173

$hessian
           [,1]       [,2]       [,3]        [,4]        [,5]       [,6]
[1,] -47.203377 -22.128566 -28.999674 -14.5518065   3.9907768  11.146229
[2,] -22.128566 -21.630656 -14.088962 -13.7804284  -4.5230263   7.583561
[3,] -28.999674 -14.088962 -29.523348 -14.6015950   1.9120136  12.810130
[4,] -14.551807 -13.780428 -14.601595 -14.4885595  -0.7826912   9.594303
[5,]   3.990777  -4.523026   1.912014  -0.7826912 -26.2604122 -11.833006
[6,]  11.146229   7.583561  12.810130   9.5943032 -11.8330058 -14.028091

$bigv
           [,1]       [,2]      [,3]       [,4]      [,5]       [,6]
[1,]  87.518169  25.945554  35.67212   6.782284 -72.99341 -24.813036
[2,]  25.945554  11.647745  10.02441   3.528126 -36.24051  -9.357740
[3,]  35.672121  10.024411  14.82688   2.748180 -31.01198 -10.127995
[4,]   6.782284   3.528126   2.74818   1.288596 -14.31203  -2.962517
[5,] -72.993407 -36.240514 -31.01198 -14.312027 166.34262  32.671796
[6,] -24.813036  -9.357740 -10.12799  -2.962517  32.67180   8.456100

> ## IGNORE_RDIFF_END
>  all.equal(out$gradient, my.gradient, tolerance = tol)
[1] TRUE
>  
>  my.hessian <- matrix(0, nparm, nparm)
>  for (j in 1:nparm) {
+      beta.eps <- beta
+      sigma.eps <- sigma
+      if (j <= length(beta)) {
+          beta.eps[j] <- beta[j] + epsilon
+      } else {
+          sigma.eps[j - length(beta)] <- sigma[j - length(beta)] + epsilon
+      }
+      set.seed(42)
+      out.eps <- bnlogl(y, beta.eps, sigma.eps, nmiss, x, z, i, moo, deriv = 1)
+      my.hessian[ , j] <- (out.eps$gradient - out$gradient) / epsilon
+  }
> ## IGNORE_RDIFF_BEGIN
>  print(my.hessian)
           [,1]       [,2]       [,3]        [,4]        [,5]       [,6]
[1,] -47.203372 -22.128564 -28.999676 -14.5518076   3.9907835  11.146236
[2,] -22.128565 -21.630654 -14.088964 -13.7804298  -4.5230218   7.583568
[3,] -28.999671 -14.088960 -29.523349 -14.6015952   1.9120184  12.810136
[4,] -14.551805 -13.780427 -14.601596 -14.4885607  -0.7826874   9.594308
[5,]   3.990773  -4.523031   1.912016  -0.7826877 -26.2604232 -11.833018
[6,]  11.146233   7.583569  12.810132   9.5943001 -11.8329901 -14.028076
> ## IGNORE_RDIFF_END
> 
>  all.equal(out$hessian, my.hessian, tolerance = tol)
[1] TRUE
>  
>  my.bigv <- matrix(0, nparm, nparm)
>  for (j in 1:ncol(y)) {
+      set.seed(42)
+      margout <- bnmarg(y[ , j], beta, sigma, nmiss, x, z, i, moo, deriv = 1)
+      my.bigv <- my.bigv + outer(margout$gradient, margout$gradient)
+  }
>  my.bigv <- my.bigv / ncol(y)
> 
> ## IGNORE_RDIFF_BEGIN
>  print(my.bigv)
           [,1]       [,2]      [,3]       [,4]      [,5]       [,6]
[1,]  87.518169  25.945554  35.67212   6.782284 -72.99341 -24.813036
[2,]  25.945554  11.647745  10.02441   3.528126 -36.24051  -9.357740
[3,]  35.672121  10.024411  14.82688   2.748180 -31.01198 -10.127995
[4,]   6.782284   3.528126   2.74818   1.288596 -14.31203  -2.962517
[5,] -72.993407 -36.240514 -31.01198 -14.312027 166.34262  32.671796
[6,] -24.813036  -9.357740 -10.12799  -2.962517  32.67180   8.456100
> ## IGNORE_RDIFF_END
>  all.equal(out$bigv, my.bigv)
[1] TRUE
> 
> 
> proc.time()
   user  system elapsed 
  0.380   0.021   0.393 
