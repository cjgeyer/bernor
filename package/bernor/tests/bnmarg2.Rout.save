
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
>  tol <- 1e-6
> 
>  library(bernor)
>  load("salam-old.RData")
>  attach(salam)
> 
>  beta <- c(0.91, -3.01, -0.49, 3.54)
>  sigma <- c(1.18, 0.98)
> 
>  moo <- model("gauss", length(i), 0.2)
> 
>  nmiss <- 100
>  set.seed(42)
>  out <- bnmarg(y[ , 1], beta, sigma, nmiss, x, z, i, moo, want.weights = TRUE)
> ## IGNORE_RDIFF_BEGIN
>  print(out)
$value
[1] -111.7695

$weigh
  [1] 1.292227e-02 9.103103e-09 5.432434e-06 6.167573e-08 5.485625e-08
  [6] 1.590573e-08 3.506690e-06 7.315968e-08 4.447877e-09 2.145063e-07
 [11] 2.179124e-05 6.188587e-04 4.213745e-06 1.400093e-02 7.478577e-07
 [16] 1.226403e-06 4.537195e-05 3.072814e-08 1.310263e-06 8.192715e-08
 [21] 9.529000e-05 3.339260e-09 2.861451e-01 1.912212e-04 5.407292e-01
 [26] 2.456275e-05 5.706058e-07 3.323997e-08 9.229095e-04 6.010591e-06
 [31] 1.390455e-04 6.961151e-07 4.210411e-07 1.131099e-05 7.228802e-06
 [36] 2.851382e-08 4.617086e-07 2.946989e-06 3.054336e-05 2.101855e-05
 [41] 1.330705e-07 6.273647e-02 4.655127e-07 5.826933e-07 4.521454e-04
 [46] 2.211049e-07 2.177834e-06 4.168156e-06 3.619286e-08 8.358805e-08
 [51] 1.602232e-07 8.293495e-06 1.059586e-07 1.012689e-04 9.038120e-06
 [56] 6.437349e-05 5.204940e-06 2.031320e-07 1.173401e-06 3.784491e-08
 [61] 9.282686e-08 2.675216e-07 1.915200e-08 1.459754e-02 5.869712e-05
 [66] 8.641126e-08 2.741597e-03 1.430811e-07 9.418024e-07 4.547944e-07
 [71] 1.146015e-04 1.646571e-02 5.359362e-08 5.318539e-04 8.116723e-06
 [76] 1.224405e-06 3.381098e-08 1.217757e-06 3.330924e-06 3.976710e-05
 [81] 1.118728e-05 3.855256e-06 2.589140e-04 1.797955e-03 1.824446e-07
 [86] 9.145875e-07 3.944393e-05 3.632124e-11 5.602613e-03 3.836948e-02
 [91] 5.154033e-07 1.799259e-07 3.289464e-07 5.986552e-07 2.797820e-06
 [96] 1.457501e-07 6.985229e-07 3.862132e-08 3.274260e-06 6.863988e-10

> ## IGNORE_RDIFF_END
> 
>  my.bnmarg <- function(y, beta, sigma, nmiss, x, z, iv, model) {
+      logf <- rep(NA, nmiss)
+      logh <- rep(NA, nmiss)
+      for (i in 1:nmiss) {
+          b <- rmiss(model)
+          out <- bernor(y, beta, b, sigma, x, z, iv)
+          logf[i] <- out$value
+          logh[i] <- dmiss(b, model)
+      }
+      a <- max(logf - logh)
+      value <- a + log(mean(exp(logf - logh - a)))
+      w <- exp(logf - logh - a)
+      w <- w / sum(w)
+      return(list(value = value, weigh = w))
+  }
> 
>  set.seed(42)
>  my.out <- my.bnmarg(y[ , 1], beta, sigma, nmiss, x, z, i, moo)
> ## IGNORE_RDIFF_BEGIN
>  print(my.out)
$value
[1] -111.7695

$weigh
  [1] 1.292227e-02 9.103103e-09 5.432434e-06 6.167573e-08 5.485625e-08
  [6] 1.590573e-08 3.506690e-06 7.315968e-08 4.447877e-09 2.145063e-07
 [11] 2.179124e-05 6.188587e-04 4.213745e-06 1.400093e-02 7.478577e-07
 [16] 1.226403e-06 4.537195e-05 3.072814e-08 1.310263e-06 8.192715e-08
 [21] 9.529000e-05 3.339260e-09 2.861451e-01 1.912212e-04 5.407292e-01
 [26] 2.456275e-05 5.706058e-07 3.323997e-08 9.229095e-04 6.010591e-06
 [31] 1.390455e-04 6.961151e-07 4.210411e-07 1.131099e-05 7.228802e-06
 [36] 2.851382e-08 4.617086e-07 2.946989e-06 3.054336e-05 2.101855e-05
 [41] 1.330705e-07 6.273647e-02 4.655127e-07 5.826933e-07 4.521454e-04
 [46] 2.211049e-07 2.177834e-06 4.168156e-06 3.619286e-08 8.358805e-08
 [51] 1.602232e-07 8.293495e-06 1.059586e-07 1.012689e-04 9.038120e-06
 [56] 6.437349e-05 5.204940e-06 2.031320e-07 1.173401e-06 3.784491e-08
 [61] 9.282686e-08 2.675216e-07 1.915200e-08 1.459754e-02 5.869712e-05
 [66] 8.641126e-08 2.741597e-03 1.430811e-07 9.418024e-07 4.547944e-07
 [71] 1.146015e-04 1.646571e-02 5.359362e-08 5.318539e-04 8.116723e-06
 [76] 1.224405e-06 3.381098e-08 1.217757e-06 3.330924e-06 3.976710e-05
 [81] 1.118728e-05 3.855256e-06 2.589140e-04 1.797955e-03 1.824446e-07
 [86] 9.145875e-07 3.944393e-05 3.632124e-11 5.602613e-03 3.836948e-02
 [91] 5.154033e-07 1.799259e-07 3.289464e-07 5.986552e-07 2.797820e-06
 [96] 1.457501e-07 6.985229e-07 3.862132e-08 3.274260e-06 6.863988e-10

> ## IGNORE_RDIFF_END
>  all.equal(out, my.out, tolerance = tol)
[1] TRUE
> 
>  nparm <- length(beta) + length(sigma)
>  epsilon <- 1e-8
> 
>  my.gradient <- rep(0, nparm)
>  for (j in 1:nparm) {
+      beta.eps <- beta
+      sigma.eps <- sigma
+      if (j <= length(beta)) {
+          beta.eps[j] <- beta[j] + epsilon
+      } else {
+          sigma.eps[j - length(beta)] <- sigma[j - length(beta)] + epsilon
+      }
+      set.seed(42)
+      out.eps <- bnmarg(y[ , 1], beta.eps, sigma.eps, nmiss, x, z, i, moo)
+      my.gradient[j] <- (out.eps$value - out$value) / epsilon
+  }
> ## IGNORE_RDIFF_BEGIN
>  print(my.gradient)
[1]  3.7548006  2.4139538  0.5343495 -0.7768008 -1.7539705 -0.1650037
> ## IGNORE_RDIFF_END
> 
>  set.seed(42)
>  out <- bnmarg(y[ , 1], beta, sigma, nmiss, x, z, i, moo, deriv = 2)
> ## IGNORE_RDIFF_BEGIN
>  print(out)
$value
[1] -111.7695

$gradient
[1]  3.7547977  2.4139520  0.5343482 -0.7768027 -1.7539703 -0.1650059

$hessian
            [,1]       [,2]        [,3]       [,4]       [,5]       [,6]
[1,] -20.8833717 -8.6094281 -12.0518881 -5.4483265 -0.9744157 -1.2771878
[2,]  -8.6094281 -8.7141970  -5.3780699 -5.5234945 -0.4510997 -0.9706873
[3,] -12.0518881 -5.3780699 -11.9910105 -5.3981157 -0.7959727 -0.9758644
[4,]  -5.4483265 -5.5234945  -5.3981157 -5.5425711 -0.2735242 -0.5854356
[5,]  -0.9744157 -0.4510997  -0.7959727 -0.2735242  1.0320685  1.2481322
[6,]  -1.2771878 -0.9706873  -0.9758644 -0.5854356  1.2481322  0.8192167

> ## IGNORE_RDIFF_END
>  all.equal(out$gradient, my.gradient, tolerance = tol)
[1] "Mean relative difference: 1.092529e-06"
>  
>  my.hessian <- matrix(0, nparm, nparm)
>  for (j in 1:nparm) {
+      beta.eps <- beta
+      sigma.eps <- sigma
+      if (j <= length(beta)) {
+          beta.eps[j] <- beta[j] + epsilon
+      } else {
+          sigma.eps[j - length(beta)] <- sigma[j - length(beta)] + epsilon
+      }
+      set.seed(42)
+      out.eps <- bnmarg(y[ , 1], beta.eps, sigma.eps, nmiss, x, z, i, moo,
+          deriv = 1)
+      my.hessian[ , j] <- (out.eps$gradient - out$gradient) / epsilon
+  }
> ## IGNORE_RDIFF_BEGIN
>  print(my.hessian)
            [,1]       [,2]        [,3]       [,4]       [,5]       [,6]
[1,] -20.8833725 -8.6094277 -12.0518882 -5.4483263 -0.9744153 -1.2771878
[2,]  -8.6094285 -8.7141968  -5.3780703 -5.5234940 -0.4510995 -0.9706873
[3,] -12.0518880 -5.3780691 -11.9910103 -5.3981147 -0.7959719 -0.9758642
[4,]  -5.4483264 -5.5234942  -5.3981158 -5.5425707 -0.2735237 -0.5854357
[5,]  -0.9744181 -0.4511024  -0.7959745 -0.2735274  1.0320660  1.2481309
[6,]  -1.2771886 -0.9706889  -0.9758654 -0.5854376  1.2481303  0.8192162
> ## IGNORE_RDIFF_END
> 
>  all.equal(out$hessian, my.hessian, tolerance = tol)
[1] TRUE
>  
> 
> proc.time()
   user  system elapsed 
  0.279   0.033   0.303 
